//
//Insertion sort
//

.global main
main:
	ldr r0, =Input_data		//Used for input data address indexing
	ldr r1, =Output_data	//Used for output data address indexing

	sub r9, r1, r0

	mov r2, #0

copy_loop:
	ldr r3, [r0, r2]
 	str r3, [r1, r2]
	add r2, r2, #4
	cmp r2, r9
	bgt copy_loop

	mov r2, #4

insertion_loop:
	mov r3, r2
	ldr r4, [r1, r2]

find_position:
	sub r6, r3, #4
	ldr r5, [r1, r6]

	cmp r4, r5
	bge end_loop

	str r5, [r1, r3]

	subs r3, r3, #4
	bne find_position

end_loop:
	str r4, [r1, r3]
	add r2, r2, #4

	cmp r2, r9
	bgt forever

	b insertion_loop

forever:
	nop
	b forever



.data
.align 4
Input_data:	.word 2, 0, -7, -1, 3, 8, -4, 10
			.word -9, -16, 15, 13, 1, 4, -3, 14
			.word -8, -10, -15, 6, -13, -5, 9, 12
			.word -11, -14, -6, 11, 5, 7, -2, -12
Output_data:	.word 0, 0, 0, 0, 0, 0, 0, 0
				.word 0, 0, 0, 0, 0, 0, 0, 0
				.word 0, 0, 0, 0, 0, 0, 0, 0
				.word 0, 0, 0, 0, 0, 0, 0, 0

