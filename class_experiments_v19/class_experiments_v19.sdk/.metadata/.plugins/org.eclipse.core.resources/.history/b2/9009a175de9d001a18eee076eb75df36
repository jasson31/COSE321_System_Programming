
#include "uart_init.s"
#include "csd_zynq_peripherals.h"

#define TIMER_INITIAL	333000000

.align 5

csd_vector_table:
	b .
	b .
	b .
	b .
	b .
	b .
	b csd_IRQ_ISR
	b .

.global main
main:
	UART_init		// UART Initialization

	// Disable interrupt: CPSR'I = 1
	cpsID i

	cps #0x12	   	       // IRQ mode
	ldr	r13,=irq_stack_top // Stack pointer setup for IRQ mode

	cps #0x1F	             // SYS mode

	// Set VBAR (Vector Base Address Register) to my vector table
	ldr     r0, =csd_vector_table
	mcr     p15, 0, r0, c12, c0, 0
	dsb
	isb

	// Enable interrupt: CPSR'I = 0
	cpsIE i






	// Distributor Control Register
	ldr r0, =GICD_CTLR
	ldr r1, [r0]
	mov r2, #1       // Enable
	orr r1, r1, r2
	str r1, [r0]
	ldr r3, [r0]

	 // Interrupt Set-Enable Register 0
	ldr r0, =GICD_ISENABLER0
	ldr r1, [r0]
	mov r2, #1 << 29   // Enable #29 (Private Timer)
	orr r1, r1, r2
	str r1, [r0]
	ldr r3, [r0]

	// According to specifications,
	// Cortex-A9 supports 5-bit version of priority format [7:3] in secure world
	// ( 0 -> 8 -> 16 -> 24...)

	// Interrupt Priority Register #7
	ldr r0, =GICD_PRIOR7
	ldr r1, [r0]
	mov r2, #0x10 << 8    // Priority 16 for ID# 29 (Private Timer)
	orr r1, r1, r2
	str r1, [r0]
	ldr r3, [r0]

	// CPU Interface Control Register
	ldr r0, =GICC_CTLR
	ldr r1, [r0]
	mov r2, #1        // Enable
	orr r1, r1, r2
	str r1, [r0]
	ldr r3, [r0]

 	// CPU Interface Interrupt Priority Mask Register
	ldr r0, =GICC_PMR
	ldr r1, [r0]
	mov r2, #0xFF     // Lowest
	orr r1, r1, r2
	str r1, [r0]
	ldr r3, [r0]







 	// Private Timer Load Register
	ldr r0, =PRIVATE_LOAD
 	ldr r1, =TIMER_INITIAL
 	str r1, [r0]

 	// Private Timer Control Register
  	ldr r0, =PRIVATE_CONTROL
 	mov r1, #0
 	orr r1, r1, #7     // IRQ Enable, Auto-Reload, Timer Enable
 	str r1, [r0]

	ldr r0, =uart_Channel_sts_reg0	//Load UART status register address
	ldr r1, =uart_TX_RX_FIFO0		//Load UART FIFO register address
  	ldr r2, =PRIVATE_COUNTER		//Load timer counter register address
  	ldr r3, =PRIVATE_STATUS			//Load timer status register address

	//Set all number (hour, minute, second) to '0'
  	mov r7, #48
  	mov r8, #48
  	mov r9, #48
  	mov r10, #48
  	mov r11, #48
  	mov r12, #48

	bl UART_print

forever:
	nop
	nop
	b forever

//Increase each numbers step by step, starts from first letter of second
//If each number exceeds it's limit, reset to '0' and increase next letter by 1
Add_Timer:
	add r7, r7, #1

	cmp r7, #58
	moveq r7, #48
	addeq r8, r8, #1

	cmp r8, #54
	moveq r8, #48
	addeq r9, r9, #1

	cmp r9, #58
	moveq r9, #48
	addeq r10, r10, #1

	cmp r10, #54
	moveq r10, #48
	addeq r11, r11, #1

	cmp r11, #58
	moveq r11, #48
	addeq r12, r12, #1

	cmp r12, #58
	moveq r12, #48

	b UART_print

UART_print:
	ldr r4, [r0]			//Load UART status
	and	r4, r4, #0x8
	cmp	r4, #0x8			//Check if Tx FIFO is empty or not
	bne	UART_print			//If Tx FIFO is not empty, loop this until Tx FIFO is empty


	mov r4, #13
	strb r4, [r1]			//Return cursor to start of the line

	strb r12, [r1]			//Print first number of hour
	strb r11, [r1]			//Print second number of hour
	mov r4, #58
	strb r4, [r1]			//Print ':' letter

	strb r10, [r1]			//Print first number of minute
	strb r9, [r1]			//Print second number of minute
	mov r4, #58
	strb r4, [r1]			//Print ':' letter

	strb r8, [r1]			//Print first number of second
	strb r7, [r1]			//Print second number of second

	mov  r4, #1
	str  r4, [r3]			//Clear status register

	mov pc, lr


csd_IRQ_ISR:

	stmfd sp!, {r0-r12, lr}

 	// Interrupt Ack
  	ldr r0, =GICC_IAR
	ldr r3, [r0]

	bl Add_Timer			//If timer ended, print current time


 	// End-of-Interrupt
  	ldr r0, =GICC_EOIR
	str r3, [r0]

	ldmfd sp!, {r0-r12, lr}
	subs pc, lr, #4

.data
	.align 4

	irq_stack:     .space 1024
	irq_stack_top:


